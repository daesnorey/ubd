/**
*
*/
CREATE TABLE AGRUPACION (
    ID_AGRUPACION NUMBER(2,0) PRIMARY KEY,
    NOMBRE VARCHAR2(30) NOT NULL
);

/**
* Tabla [TIPO_PRODUCTO]
* Contiene los tipos de productos posibles.
* @ID_PRODUCTO [PK] Identificador unico del tipo de producto.
* @NOMBRE_TIPO_PRODUCTO Identificador leible del tipo de producto.
* @DESCRIPCION_TIPO_PRODUCTO Descripción del tipo de producto.
* @ESTADO [CHK] Estado del tipo de producto. 1->Activo|2->Inactivo
*/
CREATE TABLE TIPO_PRODUCTO (
    ID_TIPO_PRODUCTO NUMBER(2,0) PRIMARY KEY,
    NOMBRE VARCHAR2(30) NOT NULL UNIQUE,
    DESCRIPCION VARCHAR2(300),
    ESTADO NUMBER(1, 0) DEFAULT 1,
    CONSTRAINT CHK_TIPO_PRODUCTO_ESTADO CHECK (ESTADO IN(0,1))
);

/**
* Tabla [PRODUCTO]
* Contiene los productos posibles por procesar
* @ID_PRODUCTO [PK] Identificador unico del producto.
* @NOMBRE Identificador leible del producto.
* @DESCRIPCION Descripción del producto.
* @ID_TIPO_PRODUCTO [FK] Referencia a un id de tipo de producto.
* @ESTADO [CHK] Estado del producto. 1->Activo|2->Inactivo
*/
CREATE TABLE PRODUCTO (
    ID_PRODUCTO NUMBER(5,0) PRIMARY KEY,
    NOMBRE VARCHAR2(30) NOT NULL UNIQUE,
    DESCRIPCION_PRODUCTO VARCHAR2(1000),
    ID_TIPO_PRODUCTO NUMBER(2,0) NOT NULL,
    ESTADO NUMBER(1,0) DEFAULT 1,
    ID_AGRUPACION NUMBER(2,0) NOT NULL,
    CONSTRAINT CHK_PRODUCTO_ESTADO CHECK (ESTADO IN(0,1)),
    CONSTRAINT FK_PRODUCTO_ID_TIPO_PRODUCTO FOREIGN KEY (ID_TIPO_PRODUCTO) REFERENCES TIPO_PRODUCTO(ID_TIPO_PRODUCTO),
    CONSTRAINT FK_PRODUCTO_ID_AGRUPACION FOREIGN KEY (ID_AGRUPACION) REFERENCES AGRUPACION(ID_AGRUPACION)
);

/**
* ALTER TABLE PRODUCTO ADD ID_AGRUPACION NUMBER(2,0);
* ALTER TABLE PRODUCTO ADD CONSTRAINT FK_PRODUCTO_ID_AGRUPACION FOREIGN KEY (ID_AGRUPACION) REFERENCES AGRUPACION(ID_AGRUPACION);
*/

/**
* Tabla [PRESENTACION]
* Contine las presentaciones disponibles para compra o venta de los productos y materia prima
* @ID_PRESENTACION [PK] identificador unico de la presentación.
* @NOMBRE Identificador leible de la prensentación ej: Libra, Kilo.
* @LIBRAS Equivalente en libras
* @FACTOR Factor multiplicador para calculo de precio
* @ESTADO [CHK] Estado del producto. 1->Activo|2->Inactivo
*/
CREATE TABLE PRESENTACION (
    ID_PRESENTACION NUMBER(2,0) PRIMARY KEY,
    NOMBRE VARCHAR2(30) UNIQUE,
    LIBRAS NUMBER(8, 2) NOT NULL,
    FACTOR NUMBER(3,2) DEFAULT 1 NOT NULL,
    ESTADO NUMBER(1,0) DEFAULT 1,
    CONSTRAINT CHK_PRESENTACION_ESTADO CHECK (ESTADO IN(0,1))
);

/**
* Tabla [PRECIO]
* Contiene los precios de los productos por presentación
* @ID_PRECIO [PK] Identificador unico de la presentación.
* @ID_PRODUCTO [FK] Referencia a un id de producto.
* @ID_PRESENTACION [FK] Referencia a un id de presentación.
* @PRECIO_REFERENCIA Precio del producto, presentación.
* @FECHA_ALTA Fecha de creación del precio.
*/
CREATE TABLE PRECIO (
    ID_PRECIO NUMBER(5,0) PRIMARY KEY,
    ID_PRODUCTO NUMBER(5,0),
    ID_PRESENTACION NUMBER(5,0),
    PRECIO_REFERENCIA NUMBER(13,3) DEFAULT 0,
    FECHA_ALTA TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT FK_PRECIO_ID_PRESENTACION FOREIGN KEY (ID_PRESENTACION) REFERENCES PRESENTACION(ID_PRESENTACION),
    CONSTRAINT FK_PRECIO_ID_PRODUCTO FOREIGN KEY (ID_PRODUCTO) REFERENCES PRODUCTO(ID_PRODUCTO)
);

/**
* Tabla [TIPO_DOCUMENTO]
* Contiene los posibles tipos de documentos.
* @ID_TIPO_DOCUMENTO [PK] Identificador unico del tipo de documento.
* @NOMBRE Identificador leible del tipo de documento.
*/
CREATE TABLE TIPO_DOCUMENTO (
    ID_TIPO_DOCUMENTO CHAR(1) PRIMARY KEY,
    NOMBRE VARCHAR2(30) NOT NULL UNIQUE
);

/**
* Tabla [ESTADO_CIVIL]
* Contiene los posibles estados civiles.
* @ID_TIPO_DOCUMENTO [PK] Identificador unico del estado civil.
* @NOMBRE Identificador leible del estado civil.
*/
CREATE TABLE ESTADO_CIVIL (
    ID_ESTADO_CIVIL CHAR(1) PRIMARY KEY,
    NOMBRE VARCHAR2(30) NOT NULL UNIQUE
);

/**
* Tabla [TERCERO]
* Contiene los terceros.
* @ID_TERCERO [PK] Identificador unico del tercero.
* @ID_TIPO_DOCUMENTO [FK] Referencia a un id de tipo de documento.
* @NUMERO_DOCUMENTO [UK] Numero de documento del tercero.
* @NOMBRES Nombres del tercero.
* @APELLIDOS Apellidos del tercero.
* @FECHA_NACIMIENTO Fecha nacimiento tercero.
* @ID_ESTADO_CIVIL [FK] Referencia a un id de estado civil.
* @FECHA_ALTA Fecha de creación del tercero.
*/
CREATE TABLE TERCERO (
    ID_TERCERO NUMBER(7,0) PRIMARY KEY,
    ID_TIPO_DOCUMENTO CHAR(1),
    NUMERO_DOCUMENTO VARCHAR2(25) NOT NULL UNIQUE,
    NOMBRES VARCHAR2(200) NOT NULL,
    APELLIDOS VARCHAR2(200),
    FECHA_NACIMIENTO DATE NOT NULL,
    ID_ESTADO_CIVIL CHAR(1),
    FECHA_ALTA TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT FK_TERCERO_ID_TIPO_DOCUMENTO FOREIGN KEY (ID_TIPO_DOCUMENTO) REFERENCES TIPO_DOCUMENTO(ID_TIPO_DOCUMENTO),
    CONSTRAINT FK_TERCERO_ID_ESTADO_CIVIL FOREIGN KEY (ID_ESTADO_CIVIL) REFERENCES ESTADO_CIVIL(ID_ESTADO_CIVIL)
);

/**
* alter table TERCERO MODIFY fecha_nacimiento DATE not null;
* ALTER TABLE TERCERO MODIFY APELLIDOS VARCHAR2(200) NULL;
*/

/**
* Tabla [CLIENTE]
* Contiene los clientes.
* @ID_CLIENTE [PK] Identificador unico del cliente.
* @ID_TERCERO [FK] Referencia a un id de tercero.
* @FACTOR_CLIENTE Multiplicador de descuento por cliente.
* @TELEFONO_CONTACTO Telefono del cliente.
* @DIRECCION_FACTURACION Dirección de facturación del cliente.
* @FECHA_ALTA Fecha de creación del tercero.
*/
CREATE TABLE CLIENTE (
    ID_CLIENTE NUMBER(5,0) PRIMARY KEY,
    ID_TERCERO NUMBER(7,0) NOT NULL UNIQUE,
    FACTOR NUMBER(3,2) DEFAULT 1 NOT NULL,
    TELEFONO NUMBER(10),
    DIRECCION VARCHAR2(150),
    FECHA_ALTA TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT FK_CLIENTE_ID_TERCERO FOREIGN KEY (ID_TERCERO) REFERENCES TERCERO(ID_TERCERO)
);

CREATE TABLE EMPLEADO (
    ID_EMPLEADO NUMBER(5,0) PRIMARY KEY,
    ID_TERCERO NUMBER(7,0) NOT NULL UNIQUE,
    FACTOR NUMBER(3,2),
    TELEFONO NUMBER(10),
    FECHA_INGRESO DATE NOT NULL,
    FECHA_RETIRO DATE,
    CONSTRAINT FK_EMPLEADO_ID_TERCERO FOREIGN KEY (ID_TERCERO) REFERENCES TERCERO(ID_TERCERO)
);

/**
* Tabla [ESTADO_INVENTARIO]
* Contiene los posibles estados de un inventario.
* @ID_ESTADO_INVENTARIO [PK] Identificador unico del estado.
* @NOMBRE Identificador leible del estado del inventario.
*/
CREATE TABLE ESTADO_INVENTARIO (
    ID_ESTADO_INVENTARIO CHAR(1) PRIMARY KEY,
    NOMBRE VARCHAR2(30) NOT NULL UNIQUE
);

/**
* Tabla [INVENTARIO]
* Contiene los posibles estados de un inventario.
* @INVENTARIO [PK] Identificador unico del inventario.
*/
CREATE TABLE INVENTARIO (
    ID_INVENTARIO NUMBER(10,0) PRIMARY KEY,
    LOTE VARCHAR2(10) NOT NULL,
    ID_PRESENTACION NUMBER(2,0),
    ID_PRODUCTO NUMBER(5,0),
    ID_ESTADO_INVENTARIO CHAR(1),
    FECHA_ALTA DATE DEFAULT CURRENT_TIMESTAMP,
    FECHA_VENCIMIENTO DATE NOT NULL,
    CONSTRAINT FK_INVENTARIO_ID_EINVENTARIO FOREIGN KEY (ID_ESTADO_INVENTARIO) REFERENCES ESTADO_INVENTARIO(ID_ESTADO_INVENTARIO),
    CONSTRAINT FK_INVENTARIO_ID_PRODUCTO FOREIGN KEY (ID_PRODUCTO) REFERENCES PRODUCTO(ID_PRODUCTO),
    CONSTRAINT FK_INVENTARIO_ID_PRESENTACION FOREIGN KEY (ID_PRESENTACION) REFERENCES PRESENTACION(ID_PRESENTACION)
);

/**
* Tabla [COMPRA]
* Contiene las compras realizadas
* @ID_COMPRA [PK] Identificador unico de la compra.
*/
CREATE TABLE COMPRA (
    ID_COMPRA NUMBER(5,0) PRIMARY KEY,
    ID_TERCERO NUMBER(7,0) NOT NULL,
    FECHA DATE DEFAULT CURRENT_TIMESTAMP,
    VALOR_NETO NUMBER(13,3) DEFAULT 0,
    VALOR_TOTAL NUMBER(13,3) DEFAULT 0,
    CONSTRAINT FK_COMPRA_ID_TERCERO FOREIGN KEY (ID_TERCERO) REFERENCES TERCERO(ID_TERCERO)
);

CREATE TABLE DETALLE_COMPRA (
    ID_DETALLE_COMPRA NUMBER(10, 0) PRIMARY KEY,
    ID_COMPRA NUMBER(5,0) NOT NULL,
    ID_PRODUCTO NUMBER(5,0) NOT NULL,
    ID_PRESENTACION NUMBER(2,0) NOT NULL,
    CANTIDAD NUMBER(5,2) NOT NULL,
    VALOR_UNITARIO NUMBER(13,3) DEFAULT 0,
    VALOR_TOTAL NUMBER(13,3) DEFAULT 0,
    CONSTRAINT FK_DETALLE_COMPRA_IDCOMPRA FOREIGN KEY (ID_COMPRA) REFERENCES COMPRA(ID_COMPRA),
    CONSTRAINT FK_DETALLE_COMPRA_IPRODUCTO FOREIGN KEY (ID_PRODUCTO) REFERENCES PRODUCTO(ID_PRODUCTO),
    CONSTRAINT FK_DETALLE_COMPRA_IPRESENTA FOREIGN KEY (ID_PRESENTACION) REFERENCES PRESENTACION(ID_PRESENTACION)
);

/**
*
*/
CREATE TABLE PRODUCCION (
    ID_PRODUCCION NUMBER(7,0) PRIMARY KEY,
    FECHA_ALTA DATE DEFAULT CURRENT_TIMESTAMP,
    VALOR NUMBER(13,3)
);

/**
*
*/
CREATE TABLE DETALLE_PRODUCCION (
    ID_DETALLE_PRODUCCION NUMBER(10,0) PRIMARY KEY,
    ID_PRODUCCION NUMBER(7,0),
    ID_INVENTARIO NUMBER(10,0) NOT NULL UNIQUE,
    VALOR NUMBER(13, 3),
    FECHA_ALTA TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT FK_DP_ID_PRODUCCION FOREIGN KEY (ID_PRODUCCION) REFERENCES PRODUCCION(ID_PRODUCCION),
    CONSTRAINT FK_DP_ID_INVENTARIO FOREIGN KEY (ID_INVENTARIO) REFERENCES INVENTARIO(ID_INVENTARIO)
);

/**
*
*/
CREATE TABLE PROCESO (
    ID_PROCESO CHAR PRIMARY KEY,
    NOMBRE VARCHAR2(30),
    ORDEN NUMBER(2,0)
);

/**
*
*/
CREATE TABLE PROCESO_PRODUCCION (
    ID_PROCESO_PRODUCCION NUMBER(10,0) PRIMARY KEY,
    ID_PRODUCCION NUMBER(7,0) NOT NULL,
    ID_PRODUCTO NUMBER(5,0) NOT NULL,
    ID_PRESENTACION NUMBER(2,0) NOT NULL,
    ID_PROCESO CHAR NOT NULL,
    ID_EMPLEADO NUMBER(5,0) NOT NULL,
    CANTIDAD NUMBER(3,0) DEFAULT 0,
    CONSTRAINT FK_PRO_PROD_ID_PRODUCCION FOREIGN KEY (ID_PRODUCCION) REFERENCES PRODUCCION(ID_PRODUCCION),
    CONSTRAINT FK_PRO_PROD_ID_PRESENTACION FOREIGN KEY (ID_PRESENTACION) REFERENCES PRESENTACION(ID_PRESENTACION),
    CONSTRAINT FK_PRO_PROD_ID_PRODUCTO FOREIGN KEY (ID_PRODUCTO) REFERENCES PRODUCTO(ID_PRODUCTO),
    CONSTRAINT FK_PRO_PROD_ID_PROCESO FOREIGN KEY (ID_PROCESO) REFERENCES PROCESO(ID_PROCESO),
    CONSTRAINT FK_PRO_PROD_ID_EMPLEADO FOREIGN KEY (ID_EMPLEADO) REFERENCES EMPLEADO(ID_EMPLEADO)
);

CREATE TABLE NUMERACION_FACTURACION (
    ID_NUMERACION NUMBER(5,0) PRIMARY KEY,
    NUMERO_RESOLUCION NUMBER(10,0),
    PREFIJO CHAR(5) NOT NULL,
    INICIO_RANGO NUMBER(10,0) NOT NULL,
    FIN_RANGO NUMBER(10,0) NOT NULL,
    FECHA_RESOLUCION DATE NOT NULL,
    CONSECUTIVO NUMBER(10,0) DEFAULT 0 NOT NULL,
    ESTADO NUMBER(1,0) DEFAULT 1,
    CONSTRAINT CHK_NUMERACION_FACTESTADO CHECK (ESTADO IN(1,0))
);

CREATE TABLE ESTADO_FACTURA (
    ID_ESTADO_FACTURA NUMBER(2,0) PRIMARY KEY,
    NOMBRE_ESTADO_FACTURA VARCHAR2(30)
);

CREATE TABLE FACTURA (
    ID_FACTURA NUMBER(5,0) PRIMARY KEY,
    ID_NUMERACION NUMBER(5,0) NOT NULL,
    CONSECUTIVO NUMBER(10,0) UNIQUE,
    ID_CLIENTE NUMBER(5,0),
    VALOR_NETO NUMBER(13,3),
    VALOR_TOTAL NUMBER(13,3),
    ID_ESTADO_FACTURA NUMBER(2,0),
    CONSTRAINT FK_FACTURA_ID_NUMERACION FOREIGN KEY (ID_NUMERACION) REFERENCES NUMERACION_FACTURACION(ID_NUMERACION)
);

CREATE TABLE DETALLE_FACTURA (
    ID_DETALLE_FACTURA NUMBER(10,0) PRIMARY KEY,
    ID_FACTURA NUMBER(5,0),
    ID_INVENTARIO NUMBER(10,0),
    VALOR NUMBER(13,3) NOT NULL,
    CONSTRAINT FK_DETALLE_FACTURA_ID_FACTURA FOREIGN KEY (ID_FACTURA) REFERENCES FACTURA(ID_FACTURA),
    CONSTRAINT FK_DETALLE_FACTURA_IINVENTARIO FOREIGN KEY (ID_INVENTARIO) REFERENCES INVENTARIO(ID_INVENTARIO)
);

/**
* ALTER TABLE PRODUCCION DROP COLUMN ID_EMPLEADO;
*/

/**
*
*/
CREATE TABLE AGRUPACION_PROCESO (
    ID_AGRUPACION NUMBER(2,0) NOT NULL,
    ID_PROCESO CHAR NOT NULL,
    CONSTRAINT PK_AGRUPACION_PROCESO PRIMARY KEY (ID_AGRUPACION, ID_PROCESO),
    CONSTRAINT FK_AGRUPACION_PROCESO_ID_AGR FOREIGN KEY (ID_AGRUPACION) REFERENCES AGRUPACION(ID_AGRUPACION),
    CONSTRAINT FK_AGRUPACION_PROCESO_ID_PRO FOREIGN KEY (ID_PROCESO) REFERENCES PROCESO(ID_PROCESO)
);

/**
*
*/
CREATE TABLE PROCESO_PRODUCTO (
    ID_PRODUCTO NUMBER(5,0) NOT NULL,
    ID_PROCESO CHAR NOT NULL,
    CONSTRAINT PK_PROCESO_PRODUCTO PRIMARY KEY (ID_PRODUCTO, ID_PROCESO),
    CONSTRAINT FK_PROCESO_PRODUCTO_ID_PRO FOREIGN KEY (ID_PROCESO) REFERENCES PROCESO(ID_PROCESO)
    CONSTRAINT FK_PROCESO_PRODUCTO_ID_PROD FOREIGN KEY (ID_PRODUCTO) REFERENCES PRODUCTO(ID_PRODUCTO)
);

/**
*
*/
CREATE TABLE PRESENTACION_PROCESO (
    ID_PROCESO CHAR NOT NULL,
    ID_PRESENTACION NUMBER(2,0) NOT NULL,
    CONSTRAINT PK_PRESENTACION_PROCESO PRIMARY KEY (ID_PROCESO, ID_PRESENTACION)
);


INSERT INTO TIPO_PRODUCTO VALUES(1, 'FRUTA', 'FRUTAS PARA HACER JUGO', 1);
INSERT INTO TIPO_PRODUCTO VALUES(2, 'VERDURA', 'VERDURAS PARA HACER ALMUERZOS', 1);
INSERT INTO TIPO_PRODUCTO VALUES(3, 'ANCHETAS', 'PARA NAVIDAD', 1);

INSERT INTO PRODUCTO VALUES(1, 'MORA', 'MORA SILVESTRE', 1, 1, 1);
INSERT INTO PRODUCTO VALUES(2, 'FRESA', 'FRESA SILVESTRE', 1, 1, 1);
INSERT INTO PRODUCTO VALUES(3, 'MARACUYA', 'MARACUYA SILVESTRE', 1, 1, 1);
INSERT INTO PRODUCTO VALUES(4, 'PAPAYA', 'PAPAYA SILVESTRE', 1, 1, 1);
INSERT INTO PRODUCTO VALUES(5, 'PIÑA', 'PIÑA SILVESTRE', 1, 1, 1);
INSERT INTO PRODUCTO VALUES(6, 'LIMON', 'LIMON SILVESTRE', 1, 1, 1);
INSERT INTO PRODUCTO VALUES(7, 'LULO', 'LULO SILVESTRE', 1, 1, 1);
INSERT INTO PRODUCTO VALUES(8, 'CEBOLLA LARGA', 'CEBOLLA SILVESTRE', 2, 1, 1);
INSERT INTO PRODUCTO VALUES(9, 'PAPA', 'PAPA SILVESTRE', 2, 1, 1);

INSERT INTO PRESENTACION VALUES(1, 'LIBRA', 1, 1, 1);
INSERT INTO PRESENTACION VALUES(2, '250 GRAMOS', 0.5, 0.6, 1);
INSERT INTO PRESENTACION VALUES(3, 'KILO', 2, 1.9, 1);
INSERT INTO PRESENTACION VALUES(4, '5 KILOS', 10, 9, 1);

INSERT INTO PRECIO (ID_PRECIO, ID_PRODUCTO, ID_PRESENTACION, PRECIO_REFERENCIA)
VALUES(1, 1, 1, 2500);
INSERT INTO PRECIO (ID_PRECIO, ID_PRODUCTO, ID_PRESENTACION, PRECIO_REFERENCIA)
VALUES(2, 2, 1, 3500);
INSERT INTO PRECIO (ID_PRECIO, ID_PRODUCTO, ID_PRESENTACION, PRECIO_REFERENCIA)
VALUES(3, 3, 1, 3500);
INSERT INTO PRECIO (ID_PRECIO, ID_PRODUCTO, ID_PRESENTACION, PRECIO_REFERENCIA)
VALUES(4, 4, 1, 3500);

INSERT INTO TIPO_DOCUMENTO VALUES('N', 'NIT');
INSERT INTO TIPO_DOCUMENTO VALUES('C', 'CEDULA');
INSERT INTO TIPO_DOCUMENTO VALUES('P', 'PASAPORTE');
INSERT INTO TIPO_DOCUMENTO VALUES('T', 'TARJETA DE IDENTIDAD');

INSERT INTO ESTADO_CIVIL VALUES('S', 'SOLTERO');
INSERT INTO ESTADO_CIVIL VALUES('C', 'CASADO');
INSERT INTO ESTADO_CIVIL VALUES('V', 'VIUDO');
INSERT INTO ESTADO_CIVIL VALUES('D', 'DIVORCIADO');

INSERT INTO ESTADO_INVENTARIO VALUES('A', 'ALTA');
INSERT INTO ESTADO_INVENTARIO VALUES('F', 'FACTURADO');
INSERT INTO ESTADO_INVENTARIO VALUES('B', 'BAJA');

INSERT INTO ESTADO_FACTURA VALUES(1, 'VIGENTE');
INSERT INTO ESTADO_FACTURA VALUES(2, 'COBRADA');
INSERT INTO ESTADO_FACTURA VALUES(3, 'ANULADA');


INSERT INTO TERCERO VALUES(1, 'C', 1013644408, 'Daniel Esteban', 'Novoa Reyes', TO_DATE('1993-10-30', 'yyyy-MM-dd'), 'S', CURRENT_TIMESTAMP);
INSERT INTO TERCERO VALUES(2, 'C', 1010189102, 'Laura Marietta', 'Corredor Saenz', TO_DATE('1990-02-03', 'yyyy-MM-dd'), 'C', CURRENT_TIMESTAMP);
INSERT INTO TERCERO VALUES(3, 'C', 1022523252, 'Walter Eli', 'Piraquive Triana', TO_DATE('1994-09-21', 'yyyy-MM-dd'), 'C', CURRENT_TIMESTAMP);


SELECT  TERCERO.ID_TIPO_DOCUMENTO, TERCERO.NUMERO_DOCUMENTO, TERCERO.NOMBRES, TERCERO.APELLIDOS,
        SUM(PRODUCCION.VALOR) VALOR
FROM    EMPLEADO INNER JOIN
        TERCERO ON TERCERO.ID_TERCERO = EMPLEADO.ID_TERCERO INNER JOIN
        PRODUCCION ON PRODUCCION.ID_EMPLEADO = EMPLEADO.ID_EMPLEADO
WHERE   EMPLEADO.FECHA_RETIRO IS NULL AND
        EXTRACT(YEAR FROM PRODUCCION.FECHA_ALTA) = (SELECT EXTRACT(YEAR FROM SYSDATE) "YEAR" FROM DUAL) AND
        EXTRACT(MONTH FROM PRODUCCION.FECHA_ALTA) = (SELECT EXTRACT(MONTH FROM SYSDATE) "MONTH" FROM DUAL)
GROUP BY TERCERO.ID_TIPO_DOCUMENTO, TERCERO.NUMERO_DOCUMENTO, TERCERO.NOMBRES, TERCERO.APELLIDOS
;


INSERT INTO EMPLEADO (ID_TERCERO, FACTOR, TELEFONO, FECHA_INGRESO) VALUES(1, 0.10, 3187962523, (SELECT SYSDATE FROM DUAL));
INSERT INTO EMPLEADO (ID_TERCERO, FACTOR, TELEFONO, FECHA_INGRESO) VALUES(2, 0.15, 3187524212, (SELECT SYSDATE FROM DUAL));
INSERT INTO EMPLEADO (ID_TERCERO, FACTOR, TELEFONO, FECHA_INGRESO) VALUES(3, 0.09, 3187912523, (SELECT SYSDATE FROM DUAL));
INSERT INTO EMPLEADO (ID_TERCERO, FACTOR, TELEFONO, FECHA_INGRESO) VALUES(4, 0.11, 3187362523, (SELECT SYSDATE FROM DUAL));
INSERT INTO EMPLEADO (ID_TERCERO, FACTOR, TELEFONO, FECHA_INGRESO) VALUES(5, 0.12, 3187942523, (SELECT SYSDATE FROM DUAL));

INSERT INTO PRODUCCION VALUES(1, 1, TO_DATE('2018-04-01', 'yyyy-MM-dd'), 35000);
INSERT INTO PRODUCCION VALUES(2, 1, TO_DATE('2018-04-02', 'yyyy-MM-dd'), 45000);
INSERT INTO PRODUCCION VALUES(3, 1, TO_DATE('2018-04-03', 'yyyy-MM-dd'), 37000);
INSERT INTO PRODUCCION VALUES(4, 1, TO_DATE('2018-04-04', 'yyyy-MM-dd'), 35000);
INSERT INTO PRODUCCION VALUES(5, 1, TO_DATE('2018-04-05', 'yyyy-MM-dd'), 29000);
INSERT INTO PRODUCCION VALUES(6, 1, TO_DATE('2018-04-06', 'yyyy-MM-dd'), 51000);
INSERT INTO PRODUCCION VALUES(7, 2, TO_DATE('2018-04-01', 'yyyy-MM-dd'), 78000);
INSERT INTO PRODUCCION VALUES(8, 2, TO_DATE('2018-04-02', 'yyyy-MM-dd'), 23000);
INSERT INTO PRODUCCION VALUES(9, 2, TO_DATE('2018-04-03', 'yyyy-MM-dd'), 63000);
INSERT INTO PRODUCCION VALUES(10, 2, TO_DATE('2018-04-04', 'yyyy-MM-dd'), 52000);
INSERT INTO PRODUCCION VALUES(11, 2, TO_DATE('2018-04-05', 'yyyy-MM-dd'), 41000);
INSERT INTO PRODUCCION VALUES(12, 2, TO_DATE('2018-04-06', 'yyyy-MM-dd'), 40000);
INSERT INTO PRODUCCION VALUES(13, 3, TO_DATE('2018-04-01', 'yyyy-MM-dd'), 19500);
INSERT INTO PRODUCCION VALUES(14, 3, TO_DATE('2018-04-02', 'yyyy-MM-dd'), 31900);
INSERT INTO PRODUCCION VALUES(15, 3, TO_DATE('2018-04-03', 'yyyy-MM-dd'), 75450);
INSERT INTO PRODUCCION VALUES(16, 3, TO_DATE('2018-04-04', 'yyyy-MM-dd'), 23000);
INSERT INTO PRODUCCION VALUES(17, 3, TO_DATE('2018-04-05', 'yyyy-MM-dd'), 27000);
INSERT INTO PRODUCCION VALUES(18, 3, TO_DATE('2018-04-06', 'yyyy-MM-dd'), 34000);

/**DETALLE_PRODUCCION (ID_DETALLE_PRODUCCION, ID_PRODUCCION, ID_INVENTARIO, FECHA_ALTA)*/
INSERT INTO DETALLE_PRODUCCION VALUES(1, 1, 1, TO_DATE('2018-04-01', 'yyyy-MM-dd'));
INSERT INTO DETALLE_PRODUCCION VALUES(2, 1, 2, TO_DATE('2018-04-01', 'yyyy-MM-dd'));
INSERT INTO DETALLE_PRODUCCION VALUES(3, 1, 3, TO_DATE('2018-04-01', 'yyyy-MM-dd'));
INSERT INTO DETALLE_PRODUCCION VALUES(4, 1, 4, TO_DATE('2018-04-01', 'yyyy-MM-dd'));

INSERT INTO DETALLE_PRODUCCION VALUES(NULL, 26, 20, SYSDATE, 2500);
INSERT INTO DETALLE_PRODUCCION VALUES(NULL, 26, 21, SYSDATE, 2500);
INSERT INTO DETALLE_PRODUCCION VALUES(NULL, 26, 22, SYSDATE, 2500);
INSERT INTO DETALLE_PRODUCCION VALUES(NULL, 26, 23, SYSDATE, 2500);
INSERT INTO DETALLE_PRODUCCION VALUES(NULL, 26, 24, SYSDATE, 2500);
INSERT INTO DETALLE_PRODUCCION VALUES(NULL, 26, 25, SYSDATE, 2500);
INSERT INTO DETALLE_PRODUCCION VALUES(NULL, 26, 26, SYSDATE, 2500);
INSERT INTO DETALLE_PRODUCCION VALUES(NULL, 26, 27, SYSDATE, 2500);
INSERT INTO DETALLE_PRODUCCION VALUES(NULL, 26, 28, SYSDATE, 2500);

/**(ID_INVENTARIO, LOTE, ID_PRESENTACION, ID_PRODUCTO, ID_ESTADO_INVENTARIO, FECHA_ALTA, FECHA_VENCIMIENTO)*/
INSERT INTO INVENTARIO VALUES(1, 'FE252C21', 1, 1, 'A', SYSDATE, TO_DATE('2018-06-03', 'yyyy-MM-dd'));
INSERT INTO INVENTARIO VALUES(2, 'DE252C21', 1, 2, 'A', SYSDATE, TO_DATE('2018-06-03', 'yyyy-MM-dd'));
INSERT INTO INVENTARIO VALUES(3, 'CE252C21', 1, 3, 'A', SYSDATE, TO_DATE('2018-06-03', 'yyyy-MM-dd'));
INSERT INTO INVENTARIO VALUES(4, 'AE252C21', 1, 4, 'A', SYSDATE, TO_DATE('2018-06-03', 'yyyy-MM-dd'));

INSERT INTO INVENTARIO VALUES(NULL, 'FE252C21', 1, 1, 'A', SYSDATE, TO_DATE('2018-06-03', 'yyyy-MM-dd'));
INSERT INTO INVENTARIO VALUES(NULL, 'FE252C21', 1, 1, 'A', SYSDATE, TO_DATE('2018-06-03', 'yyyy-MM-dd'));
INSERT INTO INVENTARIO VALUES(NULL, 'FE252C21', 1, 1, 'A', SYSDATE, TO_DATE('2018-06-03', 'yyyy-MM-dd'));
INSERT INTO INVENTARIO VALUES(NULL, 'FE252C21', 1, 1, 'A', SYSDATE, TO_DATE('2018-06-03', 'yyyy-MM-dd'));
INSERT INTO INVENTARIO VALUES(NULL, 'FE252C21', 1, 1, 'A', SYSDATE, TO_DATE('2018-06-03', 'yyyy-MM-dd'));
INSERT INTO INVENTARIO VALUES(NULL, 'FE252C21', 1, 1, 'A', SYSDATE, TO_DATE('2018-06-03', 'yyyy-MM-dd'));
INSERT INTO INVENTARIO VALUES(NULL, 'DE252C21', 1, 2, 'A', SYSDATE, TO_DATE('2018-06-03', 'yyyy-MM-dd'));
INSERT INTO INVENTARIO VALUES(NULL, 'CE252C21', 1, 3, 'A', SYSDATE, TO_DATE('2018-06-03', 'yyyy-MM-dd'));
INSERT INTO INVENTARIO VALUES(NULL, 'AE252C21', 1, 4, 'A', SYSDATE, TO_DATE('2018-06-03', 'yyyy-MM-dd'));

INSERT INTO CLIENTE VALUES(1, 2, 0.02, 3187951244, 'CR 13A 29 24', CURRENT_TIMESTAMP);
INSERT INTO CLIENTE VALUES(2, 1, 0.04, 3187951244, 'CR 13A 29 24', TO_DATE('2018-04-03','yyyy-MM-dd'));
INSERT INTO CLIENTE VALUES(3, 3, 0.04, 3187951244, 'CR 13A 29 24', TO_DATE('2018-03-03','yyyy-MM-dd'));


/**(ID_COMPRA, ID_TERCERO, FECHA, VALOR_NETO, VALOR_TOTAL, ESTADO)*/
INSERT INTO COMPRA (ID_COMPRA, ID_TERCERO, VALOR_NETO, VALOR_TOTAL) VALUES(1, 1, 0, 0);

INSERT INTO PROCESO VALUES('A', 'LAVADO', 1);
INSERT INTO PROCESO VALUES('B', 'PELADO', 2);
INSERT INTO PROCESO VALUES('C', 'DESPITONADO', 2);
INSERT INTO PROCESO VALUES('D', 'ABIERTA', 2);
INSERT INTO PROCESO VALUES('E', 'DESPEPADO', 3);
INSERT INTO PROCESO VALUES('F', 'PICADO', 3);
INSERT INTO PROCESO VALUES('G', 'RAYADO', 3);
INSERT INTO PROCESO VALUES('H', 'DESVENADO', 3);
INSERT INTO PROCESO VALUES('M', 'EXPRIMIDO', 4);
INSERT INTO PROCESO VALUES('I', 'MATRIMONIO', 4);
INSERT INTO PROCESO VALUES('J', 'CENTRIFUGO', 4);
INSERT INTO PROCESO VALUES('K', 'EMPAQUE', 5);
INSERT INTO PROCESO VALUES('L', 'SELLADO', 6);

--INSERT INTO AGRUPACION VALUES(1, '');

INSERT INTO PROCESO_PRODUCTO VALUES(1, 'A');
INSERT INTO PROCESO_PRODUCTO VALUES(1, 'C');
INSERT INTO PROCESO_PRODUCTO VALUES(1, 'K');
INSERT INTO PROCESO_PRODUCTO VALUES(1, 'L');
INSERT INTO PROCESO_PRODUCTO VALUES(2, 'A');
INSERT INTO PROCESO_PRODUCTO VALUES(2, 'C');
INSERT INTO PROCESO_PRODUCTO VALUES(2, 'K');
INSERT INTO PROCESO_PRODUCTO VALUES(2, 'L');
INSERT INTO PROCESO_PRODUCTO VALUES(3, 'A');
INSERT INTO PROCESO_PRODUCTO VALUES(3, 'D');
INSERT INTO PROCESO_PRODUCTO VALUES(3, 'E');
INSERT INTO PROCESO_PRODUCTO VALUES(3, 'K');
INSERT INTO PROCESO_PRODUCTO VALUES(3, 'L');
INSERT INTO PROCESO_PRODUCTO VALUES(4, 'A');
INSERT INTO PROCESO_PRODUCTO VALUES(4, 'B');
INSERT INTO PROCESO_PRODUCTO VALUES(4, 'D');
INSERT INTO PROCESO_PRODUCTO VALUES(4, 'E');
INSERT INTO PROCESO_PRODUCTO VALUES(4, 'F');
INSERT INTO PROCESO_PRODUCTO VALUES(4, 'K');
INSERT INTO PROCESO_PRODUCTO VALUES(4, 'L');
INSERT INTO PROCESO_PRODUCTO VALUES(5, 'A');
INSERT INTO PROCESO_PRODUCTO VALUES(5, 'B');
INSERT INTO PROCESO_PRODUCTO VALUES(5, 'F');
INSERT INTO PROCESO_PRODUCTO VALUES(5, 'K');
INSERT INTO PROCESO_PRODUCTO VALUES(5, 'L');
INSERT INTO PROCESO_PRODUCTO VALUES(6, 'A');
INSERT INTO PROCESO_PRODUCTO VALUES(6, 'D');
INSERT INTO PROCESO_PRODUCTO VALUES(6, 'M');
INSERT INTO PROCESO_PRODUCTO VALUES(6, 'K');
INSERT INTO PROCESO_PRODUCTO VALUES(6, 'L');
INSERT INTO PROCESO_PRODUCTO VALUES(7, 'A');
INSERT INTO PROCESO_PRODUCTO VALUES(7, 'B');
INSERT INTO PROCESO_PRODUCTO VALUES(7, 'F');
INSERT INTO PROCESO_PRODUCTO VALUES(7, 'K');
INSERT INTO PROCESO_PRODUCTO VALUES(7, 'L');
INSERT INTO PROCESO_PRODUCTO VALUES(8, 'A');
INSERT INTO PROCESO_PRODUCTO VALUES(8, 'F');
INSERT INTO PROCESO_PRODUCTO VALUES(8, 'J');
INSERT INTO PROCESO_PRODUCTO VALUES(8, 'K');
INSERT INTO PROCESO_PRODUCTO VALUES(8, 'L');
INSERT INTO PROCESO_PRODUCTO VALUES(9, 'A');
INSERT INTO PROCESO_PRODUCTO VALUES(9, 'B');
INSERT INTO PROCESO_PRODUCTO VALUES(9, 'F');
INSERT INTO PROCESO_PRODUCTO VALUES(9, 'J');
INSERT INTO PROCESO_PRODUCTO VALUES(9, 'K');
INSERT INTO PROCESO_PRODUCTO VALUES(9, 'L');


INSERT INTO PRESENTACION_PROCESO VALUES('A', 3);
INSERT INTO PRESENTACION_PROCESO VALUES('B', 3);
INSERT INTO PRESENTACION_PROCESO VALUES('C', 3);
INSERT INTO PRESENTACION_PROCESO VALUES('D', 3);
INSERT INTO PRESENTACION_PROCESO VALUES('E', 3);
INSERT INTO PRESENTACION_PROCESO VALUES('F', 3);
INSERT INTO PRESENTACION_PROCESO VALUES('G', 3);
INSERT INTO PRESENTACION_PROCESO VALUES('H', 3);
INSERT INTO PRESENTACION_PROCESO VALUES('M', 3);
INSERT INTO PRESENTACION_PROCESO VALUES('I', 3);
INSERT INTO PRESENTACION_PROCESO VALUES('J', 3);
INSERT INTO PRESENTACION_PROCESO VALUES('K', 1);
INSERT INTO PRESENTACION_PROCESO VALUES('K', 2);
INSERT INTO PRESENTACION_PROCESO VALUES('K', 3);
INSERT INTO PRESENTACION_PROCESO VALUES('K', 4);
INSERT INTO PRESENTACION_PROCESO VALUES('L', 1);
INSERT INTO PRESENTACION_PROCESO VALUES('L', 2);
INSERT INTO PRESENTACION_PROCESO VALUES('L', 3);
INSERT INTO PRESENTACION_PROCESO VALUES('L', 4);


/**Tareas vistas complejas*/
CREATE OR REPLACE VIEW V_PAGO_EMPLEADOS
AS SELECT  TERCERO.ID_TIPO_DOCUMENTO, TERCERO.NUMERO_DOCUMENTO, TERCERO.NOMBRES, TERCERO.APELLIDOS,
        SUM(PRODUCCION.VALOR) VALOR
FROM    EMPLEADO INNER JOIN
        TERCERO ON TERCERO.ID_TERCERO = EMPLEADO.ID_TERCERO INNER JOIN
        PRODUCCION ON PRODUCCION.ID_EMPLEADO = EMPLEADO.ID_EMPLEADO
WHERE   EMPLEADO.FECHA_RETIRO IS NULL AND
        EXTRACT(YEAR FROM PRODUCCION.FECHA_ALTA) = (SELECT EXTRACT(YEAR FROM SYSDATE) "YEAR" FROM DUAL) AND
        EXTRACT(MONTH FROM PRODUCCION.FECHA_ALTA) = (SELECT EXTRACT(MONTH FROM SYSDATE) "MONTH" FROM DUAL)
GROUP BY TERCERO.ID_TIPO_DOCUMENTO, TERCERO.NUMERO_DOCUMENTO, TERCERO.NOMBRES, TERCERO.APELLIDOS
;

CREATE OR REPLACE VIEW V_PAGO_EMPLEADOS_DIA
AS SELECT  TERCERO.ID_TIPO_DOCUMENTO, TERCERO.NUMERO_DOCUMENTO, TERCERO.NOMBRES, TERCERO.APELLIDOS,
        EXTRACT(DAY FROM PRODUCCION.FECHA_ALTA) DIA, SUM(PRODUCCION.VALOR) VALOR
FROM    EMPLEADO INNER JOIN
        TERCERO ON TERCERO.ID_TERCERO = EMPLEADO.ID_TERCERO INNER JOIN
        PRODUCCION ON PRODUCCION.ID_EMPLEADO = EMPLEADO.ID_EMPLEADO
WHERE   EMPLEADO.FECHA_RETIRO IS NULL AND
        EXTRACT(MONTH FROM PRODUCCION.FECHA_ALTA) = (SELECT EXTRACT(MONTH FROM SYSDATE) "MONTH" FROM DUAL)
GROUP BY TERCERO.ID_TIPO_DOCUMENTO, TERCERO.NUMERO_DOCUMENTO, TERCERO.NOMBRES, TERCERO.APELLIDOS, EXTRACT(DAY FROM PRODUCCION.FECHA_ALTA)
;

CREATE OR REPLACE VIEW V_CLIENTE
AS SELECT TERCERO.NUMERO_DOCUMENTO, TERCERO.ID_TIPO_DOCUMENTO, ESTADO_CIVIL.NOMBRE ESTADO_CIVIL,
        TERCERO.NOMBRES, TERCERO.APELLIDOS, TERCERO.FECHA_NACIMIENTO, CLIENTE.TELEFONO_CONTACTO, CLIENTE.DIRECCION_FACTURACION,
        CLIENTE.FECHA_ALTA ALTA, TRUNC(MONTHS_BETWEEN(SYSDATE, CLIENTE.FECHA_ALTA)) ANTIGUEDAD_MESES
FROM    CLIENTE INNER JOIN
        TERCERO ON TERCERO.ID_TERCERO = CLIENTE.ID_TERCERO INNER JOIN
        ESTADO_CIVIL ON ESTADO_CIVIL.ID_ESTADO_CIVIL = TERCERO.ID_ESTADO_CIVIL
;

CREATE OR REPLACE VIEW V_EMPLEADO
AS SELECT EMPLEADO.ID_EMPLEADO, TERCERO.ID_TERCERO, TERCERO.NUMERO_DOCUMENTO, TERCERO.ID_TIPO_DOCUMENTO, TERCERO.ID_ESTADO_CIVIL,
        TERCERO.NOMBRES, TERCERO.APELLIDOS, TERCERO.FECHA_NACIMIENTO, EMPLEADO.TELEFONO, EMPLEADO.FECHA_INGRESO, EMPLEADO.FACTOR,
        TRUNC(MONTHS_BETWEEN(SYSDATE, EMPLEADO.FECHA_INGRESO)) ANTIGUEDAD_MESES
FROM    EMPLEADO INNER JOIN
        TERCERO ON TERCERO.ID_TERCERO = EMPLEADO.ID_TERCERO
WHERE   EMPLEADO.FECHA_RETIRO IS NULL
;

/**Tareas vistas simples*/
CREATE OR REPLACE VIEW V_PRECIO
AS SELECT PRODUCTO.NOMBRE PRODUCTO, PRESENTACION.NOMBRE PRESENTACION, PRECIO.PRECIO_REFERENCIA
FROM    PRODUCTO INNER JOIN
        PRECIO ON PRECIO.ID_PRODUCTO = PRODUCTO.ID_PRODUCTO INNER JOIN
        PRESENTACION ON PRESENTACION.ID_PRESENTACION = PRECIO.ID_PRESENTACION
WHERE   PRODUCTO.ESTADO = 1 AND PRESENTACION.ESTADO = 1
ORDER BY PRODUCTO.ID_TIPO_PRODUCTO
;

CREATE OR REPLACE VIEW V_CLIENTE_MES
AS SELECT NUMERO_DOCUMENTO, ID_TIPO_DOCUMENTO, ESTADO_CIVIL,
        NOMBRES, APELLIDOS, FECHA_NACIMIENTO, TELEFONO_CONTACTO, DIRECCION_FACTURACION, ALTA
FROM    V_CLIENTE
WHERE   EXTRACT(YEAR FROM ALTA) = EXTRACT(YEAR FROM SYSDATE) AND
        EXTRACT(MONTH FROM ALTA) = EXTRACT(MONTH FROM SYSDATE)
;

CREATE OR REPLACE VIEW V_DETALLE_PRODUCCION
AS SELECT ID_PRODUCCION, ID_PRODUCTO, ID_PRESENTACION, LOTE, SUM(VALOR) VALOR, SUM(1) CANTIDAD,
        TO_CHAR(DETALLE_PRODUCCION.FECHA_ALTA, 'yyyy-mm-dd') FECHA_ALTA
FROM    DETALLE_PRODUCCION INNER JOIN
        INVENTARIO ON INVENTARIO.ID_INVENTARIO = DETALLE_PRODUCCION.ID_INVENTARIO
GROUP BY ID_PRODUCCION, ID_PRODUCTO, ID_PRESENTACION, LOTE, TO_CHAR(DETALLE_PRODUCCION.FECHA_ALTA, 'yyyy-mm-dd');

CREATE OR REPLACE VIEW V_INVENTARIO
AS SELECT LOTE, ID_PRESENTACION, ID_PRODUCTO, FECHA_ALTA, FECHA_VENCIMIENTO, SUM(1) CANTIDAD
FROM    INVENTARIO
WHERE   ID_ESTADO_INVENTARIO = 'A'
GROUP BY LOTE, ID_PRESENTACION, ID_PRODUCTO, FECHA_ALTA, FECHA_VENCIMIENTO
ORDER BY FECHA_VENCIMIENTO ASC;

/*********************************************INDEX**********************************************/

CREATE INDEX DETALLE_PRODUCCION_INDEX
ON DETALLE_PRODUCCION(ID_PRODUCCION);

CREATE INDEX CLIENTE_TERCERO_INDEX
ON CLIENTE(ID_TERCERO);

CREATE INDEX TERCERO_INDEX
ON TERCERO(ID_TIPO_DOCUMENTO, NUMERO_DOCUMENTO);

CREATE INDEX PRECIO_PROE_INDEX
ON PRECIO(ID_PRODUCTO, ID_PRESENTACION);

CREATE INDEX DETALLE_COMPRA_INDEX
ON DETALLE_COMPRA(ID_COMPRA);

CREATE INDEX INVENTARIO_PROE_INDEX
ON INVENTARIO(ID_PRODUCTO, ID_PRESENTACION);

CREATE INDEX PROCESO_PRODUCCION_INDEX
ON PROCESO_PRODUCCION(ID_EMPLEADO, ID_PRODUCTO, ID_PRESENTACION);

/*********************************************SINONIMOS**********************************************/

CREATE SYNONYM DET_FACT
FOR DETALLE_FACTURA;

CREATE SYNONYM DET_PROD
FOR DETALLE_PRODUCCION;

CREATE SYNONYM NUM_FACT
FOR NUMERACION_FACTURACION;

/*********************************************SECUENCIAS**********************************************/

DROP SEQUENCE TIPO_PRODUCTO_SEQ;
CREATE SEQUENCE TIPO_PRODUCTO_SEQ START WITH 1;

CREATE OR REPLACE TRIGGER TIPO_PRODUCTO_TRI
    BEFORE INSERT ON "TIPO_PRODUCTO"
    FOR EACH ROW
BEGIN
    IF :NEW."ID_TIPO_PRODUCTO" IS NULL THEN
        SELECT "TIPO_PRODUCTO_SEQ".NEXTVAL INTO :NEW."ID_TIPO_PRODUCTO" FROM DUAL;
    END IF;
END;
/

DROP SEQUENCE PRODUCTO_SEQ;
CREATE SEQUENCE PRODUCTO_SEQ START WITH 1;

CREATE OR REPLACE TRIGGER PRODUCTO_TRI
    BEFORE INSERT ON "PRODUCTO"
    FOR EACH ROW
BEGIN
    IF :NEW."ID_PRODUCTO" IS NULL THEN
        SELECT "PRODUCTO_SEQ".NEXTVAL INTO :NEW."ID_PRODUCTO" FROM DUAL;
    END IF;
END;
/

DROP SEQUENCE PRESENTACION_SEQ;
CREATE SEQUENCE PRESENTACION_SEQ START WITH 1;

CREATE OR REPLACE TRIGGER PRESENTACION_TRI
    BEFORE INSERT ON "PRESENTACION"
    FOR EACH ROW
BEGIN
    IF :NEW."ID_PRESENTACION" IS NULL THEN
        SELECT "PRESENTACION_SEQ".NEXTVAL INTO :NEW."ID_PRESENTACION" FROM DUAL;
    END IF;
END;
/

DROP SEQUENCE PRECIO_SEQ;
CREATE SEQUENCE PRECIO_SEQ START WITH 1;

CREATE OR REPLACE TRIGGER PRECIO_TRI
    BEFORE INSERT ON "PRECIO"
    FOR EACH ROW
BEGIN
    IF :NEW."ID_PRECIO" IS NULL THEN
        SELECT "PRECIO_SEQ".NEXTVAL INTO :NEW."ID_PRECIO" FROM DUAL;
    END IF;
END;
/

DROP SEQUENCE TERC_SEQ;
CREATE SEQUENCE TERC_SEQ START WITH 1;

CREATE OR REPLACE TRIGGER TERC_TRI
    BEFORE INSERT ON "TERCERO"
    FOR EACH ROW
BEGIN
    IF :NEW."ID_TERCERO" IS NULL THEN
        SELECT "TERC_SEQ".NEXTVAL INTO :NEW."ID_TERCERO" FROM DUAL;
    END IF;
END;
/

DROP SEQUENCE CLIE_SEQ;
CREATE SEQUENCE CLIE_SEQ START WITH 1;

CREATE OR REPLACE TRIGGER CLIE_TRI
    BEFORE INSERT ON "CLIENTE"
    FOR EACH ROW
BEGIN
    IF :NEW."ID_CLIENTE" IS NULL THEN
        SELECT "CLIE_SEQ".NEXTVAL INTO :NEW."ID_CLIENTE" FROM DUAL;
    END IF;
END;
/

DROP SEQUENCE EMPLE_SEQ;
CREATE SEQUENCE EMPLE_SEQ START WITH 5;

CREATE OR REPLACE TRIGGER EMPLE_TRI
    BEFORE INSERT ON "EMPLEADO"
    FOR EACH ROW
BEGIN
    IF :NEW."ID_EMPLEADO" IS NULL THEN
        SELECT "EMPLE_SEQ".NEXTVAL INTO :NEW."ID_EMPLEADO" FROM DUAL;
    END IF;
END;
/

DROP SEQUENCE INVENTARIO_SEQ;
CREATE SEQUENCE INVENTARIO_SEQ START WITH 1130;

CREATE OR REPLACE TRIGGER INVENTARIO_TRI
    BEFORE INSERT ON "INVENTARIO"
    FOR EACH ROW
BEGIN
    IF :NEW."ID_INVENTARIO" IS NULL THEN
        SELECT "INVENTARIO_SEQ".NEXTVAL INTO :NEW."ID_INVENTARIO" FROM DUAL;
    END IF;
END;
/

DROP SEQUENCE COMPRA_SEQ;
CREATE SEQUENCE COMPRA_SEQ START WITH 1;

CREATE OR REPLACE TRIGGER COMPRA_TRI
    BEFORE INSERT ON "COMPRA"
    FOR EACH ROW
BEGIN
    IF :NEW."ID_COMPRA" IS NULL THEN
        SELECT "COMPRA_SEQ".NEXTVAL INTO :NEW."ID_COMPRA" FROM DUAL;
    END IF;
END;
/

DROP SEQUENCE DET_COMPRA_SEQ;
CREATE SEQUENCE DET_COMPRA_SEQ START WITH 1;

CREATE OR REPLACE TRIGGER DET_COMPRA_TRI
    BEFORE INSERT ON "DETALLE_COMPRA"
    FOR EACH ROW
BEGIN
    IF :NEW."ID_DETALLE_COMPRA" IS NULL THEN
        SELECT "DET_COMPRA_SEQ".NEXTVAL INTO :NEW."ID_DETALLE_COMPRA" FROM DUAL;
    END IF;
END;
/

DROP SEQUENCE NUM_FACT_SEQ;
CREATE SEQUENCE NUM_FACT_SEQ START WITH 1;

CREATE OR REPLACE TRIGGER NUM_FACT_TRI
    BEFORE INSERT ON "NUMERACION_FACTURACION"
    FOR EACH ROW
BEGIN
    IF :NEW."ID_NUMERACION" IS NULL THEN
        SELECT "NUM_FACT_SEQ".NEXTVAL INTO :NEW."ID_NUMERACION" FROM DUAL;
    END IF;
END;
/

DROP SEQUENCE ESTADO_FACT_SEQ;
CREATE SEQUENCE ESTADO_FACT_SEQ START WITH 1;

CREATE OR REPLACE TRIGGER ESTADO_FACT_TRI
    BEFORE INSERT ON "ESTADO_FACTURA"
    FOR EACH ROW
BEGIN
    IF :NEW."ID_ESTADO_FACTURA" IS NULL THEN
        SELECT "ESTADO_FACT_SEQ".NEXTVAL INTO :NEW."ID_ESTADO_FACTURA" FROM DUAL;
    END IF;
END;
/

DROP SEQUENCE FACTURA_SEQ;
CREATE SEQUENCE FACTURA_SEQ START WITH 1;

CREATE OR REPLACE TRIGGER FACT_TRI
    BEFORE INSERT ON "FACTURA"
    FOR EACH ROW
BEGIN
    IF :NEW."ID_FACTURA" IS NULL THEN
        SELECT "FACTURA_SEQ".NEXTVAL INTO :NEW."ID_FACTURA" FROM DUAL;
    END IF;
END;
/

DROP SEQUENCE DET_FACTURA_SEQ;
CREATE SEQUENCE DET_FACTURA_SEQ START WITH 1;

CREATE OR REPLACE TRIGGER DET_FACTURA_TRI
    BEFORE INSERT ON "DETALLE_FACTURA"
    FOR EACH ROW
BEGIN
    IF :NEW."ID_DETALLE_FACTURA" IS NULL THEN
        SELECT "DET_FACTURA_SEQ".NEXTVAL INTO :NEW."ID_DETALLE_FACTURA" FROM DUAL;
    END IF;
END;
/

DROP SEQUENCE PRODUCCION_SEQ;
CREATE SEQUENCE PRODUCCION_SEQ START WITH 20;

CREATE OR REPLACE TRIGGER PRODUCCION_TRI
    BEFORE INSERT ON "PRODUCCION"
    FOR EACH ROW
BEGIN
    IF :NEW."ID_PRODUCCION" IS NULL THEN
        SELECT "PRODUCCION_SEQ".NEXTVAL INTO :NEW."ID_PRODUCCION" FROM DUAL;
    END IF;
END;
/

DROP SEQUENCE PROCESO_PRODUCCION_SEQ;
CREATE SEQUENCE PROCESO_PRODUCCION_SEQ START WITH 1;

CREATE OR REPLACE TRIGGER PROCESO_PRODUCCION_TRI
    BEFORE INSERT ON "PROCESO_PRODUCCION"
    FOR EACH ROW
BEGIN
    IF :NEW."ID_PROCESO_PRODUCCION" IS NULL THEN
        SELECT "PROCESO_PRODUCCION_SEQ".NEXTVAL INTO :NEW."ID_PROCESO_PRODUCCION" FROM DUAL;
    END IF;
END;
/

DROP SEQUENCE PRODUCCION_DET_SEQ;
CREATE SEQUENCE PRODUCCION_DET_SEQ START WITH 20;

CREATE OR REPLACE TRIGGER PRODUCCION_DET_TRI
    BEFORE INSERT ON "DETALLE_PRODUCCION"
    FOR EACH ROW
BEGIN
    IF :NEW."ID_DETALLE_PRODUCCION" IS NULL THEN
        SELECT "PRODUCCION_DET_SEQ".NEXTVAL INTO :NEW."ID_DETALLE_PRODUCCION" FROM DUAL;
    END IF;
END;
/

/******************************************************************************************************************/

CREATE TABLE AUD_INVENTARIO (
    USUARIO VARCHAR2(30),
    ACCION VARCHAR2(15),
    DETALLE VARCHAR2(500),
    FECHA DATE DEFAULT SYSDATE
);


CREATE OR REPLACE TRIGGER TRI_AUD_INVENTARIO
AFTER DELETE OR INSERT OR UPDATE ON INVENTARIO
FOR EACH ROW
DECLARE
AUD_DATE DATE;
AUD_USER VARCHAR2(30);
AUD_ACTION VARCHAR2(15);
AUD_DETAIL VARCHAR2(500);
BEGIN
SELECT USER, SYSDATE INTO AUD_USER, AUD_DATE FROM DUAL;
IF inserting THEN
    AUD_ACTION := 'ADDED';
ELSE
    IF updating THEN
        AUD_ACTION := 'UPDATED';
    ELSE
        AUD_ACTION := 'DELETED';
    END IF;
    AUD_DETAIL := 'VALORES ANTERIORES ' || :old.LOTE|| ' ' || :old.ID_PRESENTACION || ' ' || :old.ID_PRODUCTO || ' ' ||
                    :old.ID_ESTADO_INVENTARIO || ' ' || :old.FECHA_ALTA || ' ' || :old.FECHA_VENCIMIENTO || ' ' ||
                    ' NUEVOS ' || ' ' || :new.LOTE || ' ' || :new.ID_PRESENTACION || ' ' || :new.ID_PRODUCTO
                    || ' ' || :new.ID_ESTADO_INVENTARIO || ' ' || :new.FECHA_ALTA || ' ' || :new.FECHA_VENCIMIENTO;
END IF;
INSERT INTO AUD_INVENTARIO(FECHA, USUARIO, ACCION, DETALLE) VALUES (AUD_DATE, AUD_USER, AUD_ACTION, AUD_DETAIL);
END TRI_AUD_INVENTARIO;
/

CREATE TABLE AUD_NUMERACION_FACTURACION (
    USUARIO VARCHAR2(30),
    ACCION VARCHAR2(15),
    DETALLE VARCHAR2(500),
    FECHA DATE DEFAULT SYSDATE
);

CREATE OR REPLACE TRIGGER TRI_AUD_NUMERACION_FACTURACION
AFTER DELETE OR INSERT OR UPDATE ON NUMERACION_FACTURACION
FOR EACH ROW
DECLARE
AUD_DATE DATE;
AUD_USER VARCHAR2(30);
AUD_ACTION VARCHAR2(15);
AUD_DETAIL VARCHAR2(500);
BEGIN
SELECT USER, SYSDATE INTO AUD_USER, AUD_DATE FROM DUAL;
IF inserting THEN
    AUD_ACTION := 'ADDED';
ELSE
    IF updating THEN
        AUD_ACTION := 'UPDATED';
    ELSE
        AUD_ACTION := 'DELETED';
    END IF;
    AUD_DETAIL := 'VALORES ANTERIORES ' || :old.ID_NUMERACION|| ' ' || :old.NUMERO_RESOLUCION || ' ' || :old.PREFIJO || ' ' ||
                    :old.INICIO_RANGO || ' ' || :old.FIN_RANGO || ' ' || :old.FECHA_RESOLUCION || ' ' || :old.CONSECUTIVO ||
                    ' ' || :old.ESTADO || ' NUEVOS ' || :new.ID_NUMERACION|| ' ' || :new.NUMERO_RESOLUCION || ' ' || :new.PREFIJO ||
                    ' ' || :new.INICIO_RANGO || ' ' || :new.FIN_RANGO || ' ' || :new.FECHA_RESOLUCION || ' ' || :new.CONSECUTIVO ||
                    ' ' || :new.ESTADO;
END IF;
INSERT INTO AUD_NUMERACION_FACTURACION(FECHA, USUARIO, ACCION, DETALLE) VALUES (AUD_DATE, AUD_USER, AUD_ACTION, AUD_DETAIL);
END TRI_AUD_NUMERACION_FACTURACION;
/

CREATE TABLE AUD_PRECIO (
    USUARIO VARCHAR2(30),
    ACCION VARCHAR2(15),
    DETALLE VARCHAR2(500),
    FECHA DATE DEFAULT SYSDATE
);

CREATE OR REPLACE TRIGGER TRI_AUD_PRECIO
AFTER DELETE OR INSERT OR UPDATE ON PRECIO
FOR EACH ROW
DECLARE
AUD_DATE DATE;
AUD_USER VARCHAR2(30);
AUD_ACTION VARCHAR2(15);
AUD_DETAIL VARCHAR2(500);
BEGIN
SELECT USER, SYSDATE INTO AUD_USER, AUD_DATE FROM DUAL;
IF inserting THEN
    AUD_ACTION := 'ADDED';
ELSE
    IF updating THEN
        AUD_ACTION := 'UPDATED';
    ELSE
        AUD_ACTION := 'DELETED';
    END IF;
    AUD_DETAIL := 'VALORES ANTERIORES ' || :old.ID_PRECIO|| ' ' || :old.ID_PRODUCTO || ' ' || :old.ID_PRESENTACION || ' ' ||
                    :old.PRECIO_REFERENCIA || ' ' || :old.FECHA_ALTA || ' NUEVOS ' || :old.ID_PRECIO|| ' ' || :old.ID_PRODUCTO || ' ' ||
                    :old.ID_PRESENTACION || ' ' || :old.PRECIO_REFERENCIA || ' ' || :old.FECHA_ALTA;
END IF;
INSERT INTO AUD_PRECIO(FECHA, USUARIO, ACCION, DETALLE) VALUES (AUD_DATE, AUD_USER, AUD_ACTION, AUD_DETAIL);
END TRI_AUD_PRECIO;
/

CREATE TABLE AUD_DETALLE_COMPRA (
    USUARIO VARCHAR2(30),
    ACCION VARCHAR2(15),
    DETALLE VARCHAR2(500),
    FECHA DATE DEFAULT SYSDATE
);

CREATE OR REPLACE TRIGGER TRI_AUD_DETALLE_COMPRA
AFTER DELETE OR INSERT OR UPDATE ON DETALLE_COMPRA
FOR EACH ROW
DECLARE
AUD_DATE DATE;
AUD_USER VARCHAR2(30);
AUD_ACTION VARCHAR2(15);
AUD_DETAIL VARCHAR2(500);
BEGIN
SELECT USER, SYSDATE INTO AUD_USER, AUD_DATE FROM DUAL;
IF inserting THEN
    AUD_ACTION := 'ADDED';
ELSE
    IF updating THEN
        AUD_ACTION := 'UPDATED';
    ELSE
        AUD_ACTION := 'DELETED';
    END IF;
    AUD_DETAIL := 'VALORES ANTERIORES ' || :old.ID_DETALLE_COMPRA || ' ' || :old.ID_COMPRA || ' ' || :old.ID_PRODUCTO || ' ' ||
                    :old.ID_PRESENTACION || ' ' || :old.CANTIDAD || ' ' || :old.VALOR_UNITARIO || ' ' || :old.VALOR_TOTAL || ' ' ||
                    ' NUEVOS ' || :new.ID_DETALLE_COMPRA || ' ' || :new.ID_COMPRA || ' ' || :new.ID_PRODUCTO || ' ' ||
                    :new.ID_PRESENTACION || ' ' || :new.CANTIDAD || ' ' || :new.VALOR_UNITARIO || ' ' || :new.VALOR_TOTAL;
END IF;
INSERT INTO AUD_DETALLE_COMPRA(FECHA, USUARIO, ACCION, DETALLE) VALUES (AUD_DATE, AUD_USER, AUD_ACTION, AUD_DETAIL);
END TRI_AUD_DETALLE_COMPRA;
/

CREATE TABLE AUD_DETALLE_PRODUCCION (
    USUARIO VARCHAR2(30),
    ACCION VARCHAR2(15),
    DETALLE VARCHAR2(500),
    FECHA DATE DEFAULT SYSDATE
);

CREATE OR REPLACE TRIGGER TRI_AUD_DETALLE_PRODUCCION
AFTER DELETE OR INSERT OR UPDATE ON DETALLE_PRODUCCION
FOR EACH ROW
DECLARE
AUD_DATE DATE;
AUD_USER VARCHAR2(30);
AUD_ACTION VARCHAR2(15);
AUD_DETAIL VARCHAR2(500);
BEGIN
SELECT USER, SYSDATE INTO AUD_USER, AUD_DATE FROM DUAL;
IF inserting THEN
    AUD_ACTION := 'ADDED';
ELSE
    IF updating THEN
        AUD_ACTION := 'UPDATED';
    ELSE
        AUD_ACTION := 'DELETED';
    END IF;
    AUD_DETAIL := 'VALORES ANTERIORES ' || :old.ID_DETALLE_PRODUCCION || ' ' || :old.ID_PRODUCCION || ' ' ||
                    :old.ID_INVENTARIO || ' ' || :old.VALOR || ' ' || :old.FECHA_ALTA || ' ' ||
                    ' NUEVOS ' || :new.ID_DETALLE_PRODUCCION || ' ' || :new.ID_PRODUCCION || ' ' ||
                    :new.ID_INVENTARIO || ' ' || :new.VALOR || ' ' || :new.FECHA_ALTA || ' ' ;
END IF;
INSERT INTO AUD_DETALLE_PRODUCCION(FECHA, USUARIO, ACCION, DETALLE) VALUES (AUD_DATE, AUD_USER, AUD_ACTION, AUD_DETAIL);
END TRI_AUD_DETALLE_PRODUCCION;
/
